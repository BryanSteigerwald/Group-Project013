1. User Registration Functionality:
Users should be able to register with valid, non-blank inputs and should not be able to register with invalid inputs. This functionality works with inputs that will be stored in the user database.
- User Activity: Users should navigate to the registration page, input non-blank information, click the register button, and repeat the process with blank inputs.
- Test Inputs Include: Usernames and passwords that should both pass validation, as well as some that should fail, such as fully blank inputs.
- Environment Used: Localhost for easy testing on the local server.
- Test Results: If inputs are valid, the page should redirect to the login page with no errors. If inputs are invalid, a form description should appear, describing the error without redirecting.
- Testers: Development team members responsible for working on and testing this feature should execute tests and provide feedback on possible issues or additions.
- Risks: Failure to properly handle invalid inputs may allow registration with blank or invalid usernames and passwords.

2. Class Search Functionality:
Users should be able to search for classes from the database using the search bar input and receive valid results.
- User Activity: Navigate to the class search page, input a valid class name (e.g., "Software Development Methods and Tools" or "CSCI 3308"), and click search.
- Test Inputs: Search queries for valid classes, followed by queries for invalid classes that may not exist, to ensure specific queries are being searched.
- Test Environment: Cloud computing using queries for easy class searching.
- Test Results: If the search displays a class that matches the query, it passes; otherwise, an error is displayed.
- Testers: Development team members, possibly including beta testers, should provide feedback based on the output.
- Risks: Inadequate search algorithms or database indexing may lead to incorrect or irrelevant classes being returned.

3. Viewing Course Details:
Users should be able to view the course details of classes.
- User Activity: Click on a class when searching; users should then be able to view course details.
- Test Inputs: The selected class is the input, and it should display the corresponding details.
- Test Environment: Localhost; tests will be conducted on the local server.
- Test Results: All course details should be displayed accurately for the selected class.
- Testers: Development team members should test that the details align with the database.
- Risks: Inaccurate or incomplete data in the database could lead to incorrect course details being displayed.

4. Class Shopping Cart Functionality:
Users can review classes added using the search in the class shopping cart.
- User Activity: Navigate to the classes page, enter a query, click search, select classes, add them to the cart, check the cart to view added classes, and verify the ability to remove classes.
- Test Inputs: Search queries to add classes, then check the shopping cart to see if classes are added.
- Test Environment: Cloud and localhost environments to verify class validity and shopping cart functionality.
- Test Results: Users should be able to view, remove, and check details of classes, similar to the search function. Any invalid values on the list will be considered a failure.
- Testers: Users who interact with the app, similar to the search function.
- Risks: Issues with data synchronization between the shopping cart and the database could lead to discrepancies in the list of displayed classes.